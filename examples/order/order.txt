@library
@quantifier("signatures,KEY,${m}")
def SignedBy(sig, m, signer) := IsValidSignature(m, signer, sig)

@library
@quantifier("range,NUMBER,${s}-${e}")
def Range(n, s, e) := IsLessThan(s, n) and IsLessThan(n, e)

@library
@quantifier("stored.${contract},KEY,${key}")
def Stored(value, contract, key) := IsStored(contract, key, value)

@library
@quantifier("proof.block${b}.range${token},RANGE,${range}")
def IncludedAt(proof, leaf, token, range, root) :=
  VerifyInclusion(leaf, token, range, proof, root)

@library
@quantifier("so.block${b}.range${token},ITER,${zero}")
def SU(so, token, b) :=
  Stored(token, b).any()

@library
def Withdraw(su) :=
  Exit(su) and Stored(su.0, su.1).any()

@library
def IsValidTx(tx, token, range, block_number) :=
  Equal(tx, $txAddress)
  and Equal(tx.0, token)
  and IsContained(range, tx.1)
  and IsLessThan(block_number, tx.2)

@library
@quantifier("tx.block${b}.range${token},RANGE,${range}")
def Tx(tx, token, range, b) :=
  IsValidTx(tx, token, range, b)

def order(maker, c_token, c_amount, min_block_number, max_block_number, tx) :=
  Range(min_block_number, max_block_number).any(b ->
    SU(c_token, b).any(c_su ->
      Equal(c_su.3.address, $swapAddress)
      and IsSameAmount(c_su.1, c_amount)
      and (
        Equal(c_su.3.0, maker)
        and Equal(tx.3.address, $swapAddress)
        and Equal(tx.3.0, c_su.3.1)
        and Equal(tx.3.1, maker))
      and (
        Withdraw(c_su)
        or Tx(c_su.0, c_su.1, c_su.2).any(c_tx ->
          SignedBy(c_tx, maker).any()
        )
      )
      and SignedBy(tx, c_su.3.1).any()
    )
  )
