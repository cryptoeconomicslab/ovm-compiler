    /**
     * Decides <%= property.definition.name %>(<%= property.definition.inputDefs %>).
     */
    function decide<%= property.definition.name %>(bytes[] memory _inputs, bytes[] memory _witness) public view returns (bool) {
<%
        property.definition.propertyInputs.forEach((propertyInput, index) => {
-%>
        types.Property memory inputProperty<%=propertyInput.inputIndex%> = abi.decode(_inputs[<%=propertyInput.inputIndex%>], (types.Property));
<%
        if(propertyInput.children > 0) {
-%>
        types.Property memory inputProperty<%=propertyInput.inputIndex%>Child<%=propertyInput.children[0]%> = abi.decode(inputProperty<%=propertyInput.inputIndex%>.inputs[<%= propertyInput.children[0] %>], (types.Property));
<%
        }
-%>
<%
        })
-%>
<% if(property.definition.predicate == 'And') { -%>
        // And logical connective
<%
        property.definition.inputs.forEach((item, index) => {
-%>
<%      if(item.isCompiled) { -%>
<%- include('constructInputs', {property: item, valName: 'childInputs' + index, witnessName: '_witness'}) -%>
        require(decide<%= item.predicate.source %>(childInputs<%= index %>,  utils.subArray(_witness, 1, _witness.length)));
<%      } else { %>
<%- include('decideProperty', {property: item, valName: 'childInputs' + index}) -%>
<%      } %>
<%      }) -%>
        return true;
<% } else if(property.definition.predicate == 'ThereExistsSuchThat') { -%>
        // check ThereExistsSuchThat
<%
const quantifier = property.definition.inputs[0]
const innerProperty = property.definition.inputs[2]
-%>
<%      if(innerProperty.isCompiled) { -%>
        bytes[] memory childInputs = new bytes[](<%= innerProperty.inputs.length %>);
<%- include('constructInputs', {property: innerProperty, valName: 'childInputs', witnessName: '_witness'}) -%>
        require(decide<%= innerProperty.predicate.source %>(childInputs,  utils.subArray(_witness, 1, _witness.length)));
<%      } else { %>
<%- include('decideProperty', {property: innerProperty, valName: 'childInputs'}) -%>
<%      } %>
        return true;
<% } else if(property.definition.predicate == 'Or') { -%>
        // check Or
        uint256 orIndex = abi.decode(_witness[0], (uint256));
<%
        property.definition.inputs.forEach((item, index) => {
-%>
        if(orIndex == <%= index %>) {
            bytes[] memory childInputs<%= index %> = new bytes[](<%= item.inputs.length %>);
<%- indent(include('constructInputs', {property: item, valName: 'childInputs' + index, witnessName: '_witness'}), 4) -%>
<%        if(item.isCompiled) { -%>
            require(decide<%= item.predicate.source %>(childInputs<%= index %>,  utils.subArray(_witness, 1, _witness.length)));
<%        } else { %>
<%- indent(include('decideProperty', {property: item, valName: 'childInputs' + index}), 4) -%>
<%        } %>
        }
<%      }) -%>
        return true;
<% } else { -%>
        return false;
<% } -%>
    }
