<%  if(property.predicate.type == 'InputPredicate') { -%>
<%    if(property.inputs.length == 0) { -%>
        require(adjudicationContract.isDecidedById(keccak256(_inputs[<%= property.predicate.source.inputIndex %>])));
<%    } else { -%>
        types.Property memory inputPredicateProperty = abi.decode(_inputs[<%= property.predicate.source.inputIndex %>], (types.Property));
        bytes[] memory <%= valName %> = new bytes[](inputPredicateProperty.inputs.length + 1);
        for(uint256 i = 0;i < inputPredicateProperty.inputs.length;i++) {
            <%= valName %>[i] = inputPredicateProperty.inputs[i];
        }
        <%= valName %>[inputPredicateProperty.inputs.length] = _inputs[<%= property.inputs[0].inputIndex %>];
        require(CompiledPredicate(inputPredicateProperty.predicateAddress).decide(<%= valName %>, utils.subArray(_witness, 1, _witness.length)));
<%    } -%>
<%  } else if(property.predicate.type == 'VariablePredicate') { -%>
        require(adjudicationContract.isDecidedById(keccak256(challengeInput)));
<%  } else { -%>
        bytes[] memory <%= valName %> = new bytes[](<%= property.inputs.length %>);
<%- include('constructInputs', {property: property, valName: valName, witnessName: '_witness'}) -%>
        require(AtomicPredicate(<%= property.predicate.source %>).decide(<%= valName %>));
<%  } -%>
