pragma solidity ^0.5.0;
pragma experimental ABIEncoderV2;

import {DataTypes as types} from "../DataTypes.sol";
import "../UniversalAdjudicationContract.sol";
import "./AtomicPredicate.sol";
import "./NotPredicate.sol";

<%
  for(let c = 0;c < compiledPredicates.length;c++) {
    const claimDef = compiledPredicates[c]
%>
/**
 * <%= claimDef.name %>(<%= claimDef.inputDefs %>)
 */
contract <%= claimDef.name %> {
<%
  for(var i = 0;i < claimDef.contracts.length;i++) {
    let property = claimDef.contracts[i]
-%>
    bytes public <%= property.definition.name %> = bytes("<%= property.definition.name %>");
<%
  }
%>
    UniversalAdjudicationContract AdjudicationContract;
    AtomicPredicate SU;
    AtomicPredicate LessThan;
    AtomicPredicate eval;
    AtomicPredicate Bytes;
    AtomicPredicate SameRange;
    AtomicPredicate IsValidSignature;
    NotPredicate Not;

    constructor(address _adjudicationContractAddress) {
        AdjudicationContract = UniversalAdjudicationContract(_adjudicationContractAddress);
    }

    /**
     * @dev Validates a child node of the property in game tree.
     */
    function isValidChallenge(
        bytes[] memory _inputs,
        bytes[] memory _challengeInput,
        types.Property memory _challenge
    ) public returns (bool) {
        require(
            keccak256(abi.encode(getChild(_inputs, _challengeInput))) == keccak256(abi.encode(_challenge)),
            "_challenge must be valud child of game tree"
        );
        return true;
    }

    function getChild(
        bytes[] memory inputs,
        bytes[] memory challengeInput
    ) private returns (types.Property memory) {
        bytes32 input0 = bytesToBytes32(inputs[0]);
<%
  claimDef.contracts.forEach((property) => {
-%>
        if(input0 == <%= property.definition.name %>) {
            return getChild<%= property.definition.name %>(inputs, challengeInput);
        }
<%
  })
-%>
    }

    /**
     * @dev check the property is true
     */
    function decide(bytes[] memory _inputs, bytes memory _witness) public view returns(bool) {
        bytes32 input0 = bytesToBytes32(_inputs[0]);
<%
  claimDef.contracts.forEach((property) => {
-%>
        if(input0 == <%= property.definition.name %>) {
            decide<%= property.definition.name %>(_inputs, _witness);
        }
<%
  })
-%>
    }

    function decideTrue(bytes[] memory _inputs, bytes[] memory _witness) public {
        require(decide(_inputs, _witness), "must be true");
        types.Property memory property = types.Property({
            predicateAddress: address(this),
            inputs: _inputs
        });
        adjudicationContract.setPredicateDecision(utils.getPropertyId(property), true);
    }

<%
  claimDef.contracts.forEach((property) => {
-%>
<%- include('getChild', {property: property}); -%>
<%
  })
-%>
<%
  claimDef.contracts.forEach((property) => {
-%>
<%- include('decide', {property: property}); -%>
<%
  })
-%>

}
<% } %>
